user root;
# Nginx 进程数，一般设置为和 CPU 核数一样
worker_processes 1;
# Nginx 的错误日志存放目录
error_log logs/error.log;
# Nginx 服务启动时的 pid 存放位置
pid logs/nginx.pid;
# events段配置信息
events {
  # 每个进程允许最大并发数
  worker_connections 1024;
}
# http段配置信息
http {
  # 文件扩展名与类型映射表
  include mime.types;
  # 默认文件类型
  default_type application/json;
  # 设置日志模式,记录日志的格式
  log_format main '$remote_addr - $remote_user [$time_local] "$request" ' '$status $body_bytes_sent "$http_referer" ' '"$http_user_agent" "$http_x_forwarded_for"';
  # Nginx访问日志存放位置
  access_log logs/access.log main;
  # 开启高效传输模式
  sendfile on;
  # 减少网络报文段的数量
  tcp_nopush on;
  # 保持连接的时间，也叫超时时间，单位秒
  keepalive_timeout 65;
  # 配置开启 gzip 压缩，对于文本文件， GZiP 的效果非常明显，开启后传输所需流量大约会降至 1/4~1/3
  gzip on;
  # 定义上游服务器（指的就是后台提供的应用服务器）的相关信息
  upstream gg {
    # 定义上游服务器地址。语法：server address [parameters]
    # parameters 可选值：
    # weight=number 权重值，默认为1；
    # max_conns=number 上游服务器的最大并发连接数；
    # fail_timeout=time 服务器不可用的判定时间；
    # max_fails=numer 服务器不可用的检查次数；
    # backup 备份服务器，仅当其他服务器都不可用时才会启用；
    # down 标记服务器长期不可用，离线维护；
    # 定义了一个服务的两个实例
    server 192.168.137.12:8889 weight=123;
    server 192.168.137.12:8081 weight=123;
  }
  server {
    listen 81;
    server_name localhost;
    error_page 500 500.html;
    location / {
      # proxy_pass 用于配置代理服务器。
      # 语法：proxy_pass URL;
      # URL 参数原则
      # 1. URL 必须以 http 或 https 开头；
      # 2. URL 中可以携带变量；
      # 3. URL 中是否带 URI ，会直接影响发往上游请求的 URL ；
      # 两种用法 ：
      # 1、proxy_pass http://192.168.100.33:8081
      # 2、proxy_pass http://192.168.100.33:8081/
      #  不带 / 意味着 Nginx 不会修改用户 URL ，而是直接透传给上游的应用服务器；
      #  带 / 意味着 Nginx 会修改用户 URL ，修改方法是将 location 后的 URL 从用户 URL 中删除；
      proxy_pass http://gg;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
  }
  # server段配置信息
  server {
    # 设置编码格式
    charset utf-8;
    # 配置监听的端口
    listen 80;
    # 配置的域名
    server_name localhost;
    # location段配置信息
    location /d {
      # 指定静态资源目录位置，可以写在 http 、 server 、 location 等配置中。
      # root 会将定义路径与 URI 叠加， alias 则只取定义路径。
      # root 和 alias 出现在location配置中
      root html;
      index index.html index.htm;
    }
    error_page 404 /404.html;
    # alias也是指定静态资源目录位置
    location = /bb {
      # alias也是指定静态资源目录位置，只能写在 location 中。
      # 使用 alias 定义的路径末尾一定要添加 / 
      alias /opt/nginx/static/image/;
    }
    # return语句
    location = /b {
      # 停止处理请求，直接返回响应码或重定向到其他 URL ；
      # 执行 return 指令后， location 中后续指令将不会被执行。
      # 语法 
      #  return code [text];
      #  return code URL;
      #  return URL; 
      return https://www.baidu.com/;
    }
    # autoindex用户请求以 / 结尾时，列出目录结构，可以用于快速搭建静态资源下载网站。
    location = /download/ {
      root /root/source;
      # 打开 autoindex，可选参数有 on | off
      autoindex on;
      # 修改为off，以KB、MB、GB显示文件大小，默认为on，以bytes显示出⽂件的确切⼤⼩
      autoindex_exact_size on;
      # 显示的⽂件时间为⽂件的服务器时间。默认为off，显示的⽂件时间为GMT时间
      autoindex_localtime off;
      # 以html的方式进行格式化，可选参数有 html | json | xml
      autoindex_format html;
    }
    # Nginx变量 将这些数据以变量的形式提供给使用者。 
    location /c {
      return 200 "
            remote_addr: $remote_addr
            remote_port: $remote_port
            server_addr: $server_addr
            server_port: $server_port
            server_protocol: $server_protocol
            binary_remote_addr: $binary_remote_addr
            connection: $connection
            uri: $uri
            request_uri: $request_uri
            scheme: $scheme
            request_method: $request_method
            request_length: $request_length
            args: $args
            arg_pid: $arg_pid
            is_args: $is_args
            query_string: $query_string
            host: $host
            http_user_agent: $http_user_agent
            http_referer: $http_referer
            http_via: $http_via
            request_time: $request_time
            https: $https
            request_filename: $request_filename
            document_root: $document_root ";
    }
    # 默认50x对应的访问页面
    error_page 500 502 503 504 /index.html;
  }
}
